(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function sortTableByColumn(table, column) {
  var asc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var dirModifier = asc ? 1 : -1;
  var tBody = table.tBodies[0];
  var rows = Array.from(tBody.querySelectorAll("tr")); // sort each row

  var sortedRows = rows.sort(function (a, b) {
    var aColText = a.querySelector("td:nth-child(".concat(column + 1, ")")).textContent.trim();
    var bColText = b.querySelector("td:nth-child(".concat(column + 1, ")")).textContent.trim();
    return aColText > bColText ? 1 * dirModifier : -1 * dirModifier;
  }); // Remove all existing TRs from the table

  while (tBody.firstChild) {
    tBody.removeChild(tBody.firstChild);
  } // Re-add the newly sorted rows


  tBody.append.apply(tBody, _toConsumableArray(sortedRows)); // Remember how the column is currently sorted

  table.querySelectorAll("th.col-sortable").forEach(function (th) {
    return th.classList.remove("th-sort-asc", "th-sort-desc");
  });
  table.querySelector("th.col-sortable:nth-child(".concat(column + 1, ")")).classList.toggle("th-sort-asc", asc);
  table.querySelector("th.col-sortable:nth-child(".concat(column + 1, ")")).classList.toggle("th-sort-desc", !asc);
}

document.querySelectorAll(".table-sortable th.col-sortable").forEach(function (headerCell) {
  headerCell.addEventListener("click", function () {
    var tableElement = headerCell.parentElement.parentElement.parentElement;
    var headerIndex = Array.prototype.indexOf.call(headerCell.parentElement.children, headerCell);
    var currentIsAscending = headerCell.classList.contains("th-sort-asc");
    sortTableByColumn(tableElement, headerIndex, !currentIsAscending);
  });
});
$(document).ready(function () {
  $("#sidebarCollapse").on("click", function () {
    $("#sidebar").toggleClass("hidden");
    $("#sidebarCollapse").toggleClass("sidebar-hidden");
  });
  $("#toggle-password").on("click", function () {
    var passwordInput = document.getElementById("input-password"),
        icon = document.getElementById("fas-eye-icon");

    if (passwordInput.type === "password") {
      passwordInput.type = "text";
      icon.classList.add("fa-eye-slash");
    } else {
      passwordInput.type = "password";
      icon.classList.remove("fa-eye-slash");
    }
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdGhlbWVzL2pzL3RoZW1lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7QUNBQSxTQUFTLGlCQUFULENBQTJCLEtBQTNCLEVBQWtDLE1BQWxDLEVBQXNEO0FBQUEsTUFBWixHQUFZLHVFQUFOLElBQU07QUFDcEQsTUFBTSxXQUFXLEdBQUcsR0FBRyxHQUFHLENBQUgsR0FBTyxDQUFDLENBQS9CO0FBQ0EsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLENBQWQ7QUFDQSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUssQ0FBQyxnQkFBTixDQUF1QixJQUF2QixDQUFYLENBQWIsQ0FIb0QsQ0FLcEQ7O0FBQ0EsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUwsQ0FBVSxVQUFDLENBQUQsRUFBSSxDQUFKLEVBQVU7QUFDckMsUUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUNmLGFBRGMsd0JBQ2dCLE1BQU0sR0FBRyxDQUR6QixRQUVkLFdBRmMsQ0FFRixJQUZFLEVBQWpCO0FBR0EsUUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUNmLGFBRGMsd0JBQ2dCLE1BQU0sR0FBRyxDQUR6QixRQUVkLFdBRmMsQ0FFRixJQUZFLEVBQWpCO0FBSUEsV0FBTyxRQUFRLEdBQUcsUUFBWCxHQUFzQixJQUFJLFdBQTFCLEdBQXdDLENBQUMsQ0FBRCxHQUFLLFdBQXBEO0FBQ0QsR0FUa0IsQ0FBbkIsQ0FOb0QsQ0FpQnBEOztBQUNBLFNBQU8sS0FBSyxDQUFDLFVBQWIsRUFBeUI7QUFDdkIsSUFBQSxLQUFLLENBQUMsV0FBTixDQUFrQixLQUFLLENBQUMsVUFBeEI7QUFDRCxHQXBCbUQsQ0FzQnBEOzs7QUFDQSxFQUFBLEtBQUssQ0FBQyxNQUFOLE9BQUEsS0FBSyxxQkFBVyxVQUFYLEVBQUwsQ0F2Qm9ELENBeUJwRDs7QUFDQSxFQUFBLEtBQUssQ0FDRixnQkFESCxDQUNvQixpQkFEcEIsRUFFRyxPQUZILENBRVcsVUFBQyxFQUFEO0FBQUEsV0FBUSxFQUFFLENBQUMsU0FBSCxDQUFhLE1BQWIsQ0FBb0IsYUFBcEIsRUFBbUMsY0FBbkMsQ0FBUjtBQUFBLEdBRlg7QUFHQSxFQUFBLEtBQUssQ0FDRixhQURILHFDQUM4QyxNQUFNLEdBQUcsQ0FEdkQsUUFFRyxTQUZILENBRWEsTUFGYixDQUVvQixhQUZwQixFQUVtQyxHQUZuQztBQUdBLEVBQUEsS0FBSyxDQUNGLGFBREgscUNBQzhDLE1BQU0sR0FBRyxDQUR2RCxRQUVHLFNBRkgsQ0FFYSxNQUZiLENBRW9CLGNBRnBCLEVBRW9DLENBQUMsR0FGckM7QUFHRDs7QUFFRCxRQUFRLENBQ0wsZ0JBREgsQ0FDb0IsaUNBRHBCLEVBRUcsT0FGSCxDQUVXLFVBQUMsVUFBRCxFQUFnQjtBQUN2QixFQUFBLFVBQVUsQ0FBQyxnQkFBWCxDQUE0QixPQUE1QixFQUFxQyxZQUFNO0FBQ3pDLFFBQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxhQUFYLENBQXlCLGFBQXpCLENBQXVDLGFBQTVEO0FBQ0EsUUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFNBQU4sQ0FBZ0IsT0FBaEIsQ0FBd0IsSUFBeEIsQ0FDbEIsVUFBVSxDQUFDLGFBQVgsQ0FBeUIsUUFEUCxFQUVsQixVQUZrQixDQUFwQjtBQUlBLFFBQU0sa0JBQWtCLEdBQUcsVUFBVSxDQUFDLFNBQVgsQ0FBcUIsUUFBckIsQ0FBOEIsYUFBOUIsQ0FBM0I7QUFFQSxJQUFBLGlCQUFpQixDQUFDLFlBQUQsRUFBZSxXQUFmLEVBQTRCLENBQUMsa0JBQTdCLENBQWpCO0FBQ0QsR0FURDtBQVVELENBYkg7QUFlQSxDQUFDLENBQUMsUUFBRCxDQUFELENBQVksS0FBWixDQUFrQixZQUFZO0FBQzVCLEVBQUEsQ0FBQyxDQUFDLGtCQUFELENBQUQsQ0FBc0IsRUFBdEIsQ0FBeUIsT0FBekIsRUFBa0MsWUFBTTtBQUN0QyxJQUFBLENBQUMsQ0FBQyxVQUFELENBQUQsQ0FBYyxXQUFkLENBQTBCLFFBQTFCO0FBQ0EsSUFBQSxDQUFDLENBQUMsa0JBQUQsQ0FBRCxDQUFzQixXQUF0QixDQUFrQyxnQkFBbEM7QUFDRCxHQUhEO0FBS0EsRUFBQSxDQUFDLENBQUMsa0JBQUQsQ0FBRCxDQUFzQixFQUF0QixDQUF5QixPQUF6QixFQUFrQyxZQUFNO0FBQ3RDLFFBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLGdCQUF4QixDQUFwQjtBQUFBLFFBQ0UsSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFULENBQXdCLGNBQXhCLENBRFQ7O0FBRUUsUUFBSSxhQUFhLENBQUMsSUFBZCxLQUF1QixVQUEzQixFQUF1QztBQUVyQyxNQUFBLGFBQWEsQ0FBQyxJQUFkLEdBQXFCLE1BQXJCO0FBQ0EsTUFBQSxJQUFJLENBQUMsU0FBTCxDQUFlLEdBQWYsQ0FBbUIsY0FBbkI7QUFDRCxLQUpELE1BSU87QUFDTCxNQUFBLGFBQWEsQ0FBQyxJQUFkLEdBQXFCLFVBQXJCO0FBQ0EsTUFBQSxJQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsQ0FBc0IsY0FBdEI7QUFDRDtBQUNKLEdBWEQ7QUFZRCxDQWxCRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImZ1bmN0aW9uIHNvcnRUYWJsZUJ5Q29sdW1uKHRhYmxlLCBjb2x1bW4sIGFzYyA9IHRydWUpIHtcbiAgY29uc3QgZGlyTW9kaWZpZXIgPSBhc2MgPyAxIDogLTE7XG4gIGNvbnN0IHRCb2R5ID0gdGFibGUudEJvZGllc1swXTtcbiAgY29uc3Qgcm93cyA9IEFycmF5LmZyb20odEJvZHkucXVlcnlTZWxlY3RvckFsbChcInRyXCIpKTtcblxuICAvLyBzb3J0IGVhY2ggcm93XG4gIGNvbnN0IHNvcnRlZFJvd3MgPSByb3dzLnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCBhQ29sVGV4dCA9IGFcbiAgICAgIC5xdWVyeVNlbGVjdG9yKGB0ZDpudGgtY2hpbGQoJHtjb2x1bW4gKyAxfSlgKVxuICAgICAgLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICBjb25zdCBiQ29sVGV4dCA9IGJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKGB0ZDpudGgtY2hpbGQoJHtjb2x1bW4gKyAxfSlgKVxuICAgICAgLnRleHRDb250ZW50LnRyaW0oKTtcblxuICAgIHJldHVybiBhQ29sVGV4dCA+IGJDb2xUZXh0ID8gMSAqIGRpck1vZGlmaWVyIDogLTEgKiBkaXJNb2RpZmllcjtcbiAgfSk7XG5cbiAgLy8gUmVtb3ZlIGFsbCBleGlzdGluZyBUUnMgZnJvbSB0aGUgdGFibGVcbiAgd2hpbGUgKHRCb2R5LmZpcnN0Q2hpbGQpIHtcbiAgICB0Qm9keS5yZW1vdmVDaGlsZCh0Qm9keS5maXJzdENoaWxkKTtcbiAgfVxuXG4gIC8vIFJlLWFkZCB0aGUgbmV3bHkgc29ydGVkIHJvd3NcbiAgdEJvZHkuYXBwZW5kKC4uLnNvcnRlZFJvd3MpO1xuXG4gIC8vIFJlbWVtYmVyIGhvdyB0aGUgY29sdW1uIGlzIGN1cnJlbnRseSBzb3J0ZWRcbiAgdGFibGVcbiAgICAucXVlcnlTZWxlY3RvckFsbChcInRoLmNvbC1zb3J0YWJsZVwiKVxuICAgIC5mb3JFYWNoKCh0aCkgPT4gdGguY2xhc3NMaXN0LnJlbW92ZShcInRoLXNvcnQtYXNjXCIsIFwidGgtc29ydC1kZXNjXCIpKTtcbiAgdGFibGVcbiAgICAucXVlcnlTZWxlY3RvcihgdGguY29sLXNvcnRhYmxlOm50aC1jaGlsZCgke2NvbHVtbiArIDF9KWApXG4gICAgLmNsYXNzTGlzdC50b2dnbGUoXCJ0aC1zb3J0LWFzY1wiLCBhc2MpO1xuICB0YWJsZVxuICAgIC5xdWVyeVNlbGVjdG9yKGB0aC5jb2wtc29ydGFibGU6bnRoLWNoaWxkKCR7Y29sdW1uICsgMX0pYClcbiAgICAuY2xhc3NMaXN0LnRvZ2dsZShcInRoLXNvcnQtZGVzY1wiLCAhYXNjKTtcbn1cblxuZG9jdW1lbnRcbiAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFibGUtc29ydGFibGUgdGguY29sLXNvcnRhYmxlXCIpXG4gIC5mb3JFYWNoKChoZWFkZXJDZWxsKSA9PiB7XG4gICAgaGVhZGVyQ2VsbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgdGFibGVFbGVtZW50ID0gaGVhZGVyQ2VsbC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgICAgIGNvbnN0IGhlYWRlckluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChcbiAgICAgICAgaGVhZGVyQ2VsbC5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLFxuICAgICAgICBoZWFkZXJDZWxsXG4gICAgICApO1xuICAgICAgY29uc3QgY3VycmVudElzQXNjZW5kaW5nID0gaGVhZGVyQ2VsbC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0aC1zb3J0LWFzY1wiKTtcblxuICAgICAgc29ydFRhYmxlQnlDb2x1bW4odGFibGVFbGVtZW50LCBoZWFkZXJJbmRleCwgIWN1cnJlbnRJc0FzY2VuZGluZyk7XG4gICAgfSk7XG4gIH0pO1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICQoXCIjc2lkZWJhckNvbGxhcHNlXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICQoXCIjc2lkZWJhclwiKS50b2dnbGVDbGFzcyhcImhpZGRlblwiKTtcbiAgICAkKFwiI3NpZGViYXJDb2xsYXBzZVwiKS50b2dnbGVDbGFzcyhcInNpZGViYXItaGlkZGVuXCIpO1xuICB9KTtcblxuICAkKFwiI3RvZ2dsZS1wYXNzd29yZFwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICBsZXQgcGFzc3dvcmRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW5wdXQtcGFzc3dvcmRcIiksXG4gICAgICBpY29uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmYXMtZXllLWljb25cIik7XG4gICAgICBpZiAocGFzc3dvcmRJbnB1dC50eXBlID09PSBcInBhc3N3b3JkXCIpIHtcblxuICAgICAgICBwYXNzd29yZElucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgaWNvbi5jbGFzc0xpc3QuYWRkKFwiZmEtZXllLXNsYXNoXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFzc3dvcmRJbnB1dC50eXBlID0gXCJwYXNzd29yZFwiO1xuICAgICAgICBpY29uLmNsYXNzTGlzdC5yZW1vdmUoXCJmYS1leWUtc2xhc2hcIik7XG4gICAgICB9XG4gIH0pO1xufSk7XG4iXX0=
